
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getProfiles() : Promise<Result<Profiles, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_profiles") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveProfile(id: number | null, profile: Profile) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_profile", { id, profile }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async deleteProfile(id: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("delete_profile", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async duplicateProfile(id: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("duplicate_profile", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async moveProfile(fromIndex: number, toIndex: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("move_profile", { fromIndex, toIndex }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async shouldRequestPassword(id: number) : Promise<Result<boolean, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("should_request_password", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async checkLaunchProfile(id: number) : Promise<Result<LaunchStatus, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("check_launch_profile", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async installGameForProfile(id: number, downloadInfo: FileInstallConfig[], channel: TAURI_CHANNEL<InstallTaskProgress>) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("install_game_for_profile", { id, downloadInfo, channel }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateProfileServerFiles(id: number, channel: TAURI_CHANNEL<UpdateTaskMessage>) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update_profile_server_files", { id, channel }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async launchProfile(id: number, password: string | null) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("launch_profile", { id, password }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async cancelPossibleProfileTask(id: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("cancel_possible_profile_task", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listAshitaAddons(ashitaDirectory: string) : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("list_ashita_addons", { ashitaDirectory }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listAshitaPlugins(ashitaDirectory: string) : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("list_ashita_plugins", { ashitaDirectory }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async configureGamepad(gameDirectory: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("configure_gamepad", { gameDirectory }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type AuthKind = "Token" | "Password" | "ManualPassword"
export type FileInstallConfig = { url: string }
export type InstallConfig = { directory?: string | null; 
/**
 * If None, and [InstallConfig::directory] is set, then [InstallConfig::directory] is assumed to have Ashita in it as well.
 */
ashita_directory?: string | null; windower_directory?: string | null }
export type InstallTaskProgress = { event: "Pending" } | { event: "DownloadStarted"; data: { content_length: number } } | { event: "DownloadProgress"; data: { finished_length: number } } | { event: "Installing" } | { event: "Complete" } | { event: "Error"; data: string }
export type LaunchStatus = { type: "NeedsGameDir" } | { type: "NeedsInstall" } | { type: "NeedsAndCanInstall"; data: { download_info: FileInstallConfig[] } } | { type: "NeedsAshita" } | { type: "NeedsWindower" } | { type: "NeedsUpdate"; data: { versions_info: VersionsInfo } } | { type: "NeedsPassword" } | { type: "Ready" }
export type Profile = { id: number; name?: string | null; server?: string | null; server_nickname?: string | null; server_info_addr?: string | null; use_windower?: boolean; is_retail?: boolean; install?: InstallConfig; account_name?: string | null; password?: string | null; auth_kind?: AuthKind; manual_auth?: boolean; hairpin?: boolean; enable_gamepad?: boolean; enable_gamepad_background?: boolean; resolution?: Resolution; background_resolution?: Resolution; menu_resolution?: Resolution; start_pos_x?: number; start_pos_y?: number; enabled_addons?: string[] | null; enabled_plugins?: string[] | null; extra_pivots?: string[]; windower_profile?: string | null }
export type Profiles = { ids?: number[]; map?: Partial<{ [key in number]: Profile }> }
export type Resolution = { width: number; height: number }
export type TAURI_CHANNEL<TSend> = null
export type UpdateTaskMessage = { event: "DownloadPending"; data: { id: string } } | { event: "DownloadStarted"; data: { id: string; content_length: number } } | { event: "DownloadProgress"; data: { id: string; finished_length: number } } | { event: "DownloadFinished"; data: { id: string } } | { event: "UnpackPending"; data: { id: string } } | { event: "UnpackFinished"; data: { id: string } } | { event: "FailedSpecific"; data: { id: string } } | { event: "Done" }
export type VersionInfo = { url: string; version: string }
export type VersionsInfo = { dats?: VersionInfo | null; bootloader?: VersionInfo | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
